"""
Django settings for kajisuke project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
# from dotenv import load_dotenv
import boto3
from botocore.exceptions import ClientError
import json

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEYを.envから取得
SECRET_KEY = os.environ.get("SECRET_KEY")

DEBUG = "False"

# .envファイルを読み込むために存在するため、後ほど削除
# load_dotenv()

# ALLOWED_HOSTSを本番環境時に変更
# ALLOWED_HOSTS = ['*']

# 本番環境用
ALLOWED_HOSTS = [
    "kajisuke.com",
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 作成したアプリケーションを追加
    'apps.apps.AppsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'kajisuke.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'kajisuke.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASESをMySQLへ変更
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.mysql",
#         # コンテナ内の環境変数をDATABASESのパラメータに反映
#         "NAME": os.environ.get("MYSQL_DATABASE"),
#         "USER": os.environ.get("MYSQL_USER"),
#         "PASSWORD": os.environ.get("MYSQL_PASSWORD"),
#         # DBサーバーの指定。コンテナの場合はDBコンテナのservice名
#         "HOST": "mysql",
#         "PORT": os.environ.get("MYSQL_PORT"),
#         "OPTIONS": {
#             # STRICT_TRANS_TABLES：InsertやUpdateをした値がテーブルの指定に従っていない場合に、SQLの実行を中止する
#             "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
#         },
#     }
# }


def get_secret():

    secret_name = "kajisuke-db/credentials"
    region_name = "ap-northeast-1"

    # Create a Secrets Manager client
    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name
    )

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except ClientError as e:
        # For a list of exceptions thrown, see
        # https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
        raise e

    secret = get_secret_value_response['SecretString']
    return json.loads(secret)


db_credentials = get_secret()

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': db_credentials['dbname'],
        'USER': db_credentials['username'],
        'PASSWORD': db_credentials['password'],
        'HOST': db_credentials['host'],
        'PORT': db_credentials['port'],
        "OPTIONS": {
            # STRICT_TRANS_TABLES：InsertやUpdateをした値がテーブルの指定に従っていない場合に、SQLの実行を中止する
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_ROOT = BASE_DIR / "staticfiles"
STATIC_URL = 'static/'

STATICFILES_DIR = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

INTERNAL_IPS = ['127.0.0.1',]
